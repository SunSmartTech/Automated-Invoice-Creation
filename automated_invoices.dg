contactRecord = zoho.crm.getRecordById("Contacts", CONTACT_ID);
info contactRecord;
	email = contactRecord.get("Email");
	firstName = contactRecord.get("First_Name");
	lastName = contactRecord.get("Last_Name");
	participationCode = contactRecord.get("MRWPC_Participation_Code");
	discount = contactRecord.get("Course_Discount");
	
getOrganizations = invokeurl
		[
			url : "https://books.zoho.com/api/v3/organizations"
			type :GET
			connection:"zohobooks"
		];
info getOrganizations;
//will have to do some sort of search if you have more than one organization based off name or something else
orgId = getOrganizations.get("organizations").get(0).get("organization_id");
info orgId;

searchParam = {"email":email};
//everything in Zoho Finance requires an org ID as a parameter
invoiceContact = zoho.invoice.getRecords("Contacts",orgId,searchParam).get("contacts");
/*just a Boolean return value upon which to base our If/Else statement. If it's empty, need to create the
contact record in the Invoices app/module */
contactSearch = invoiceContact.isEmpty();
	
if(contactSearch == false) //(not empty, go ahead and create the invoice)
{
	specificContact = invoiceContact.get(0);
	contactId = specificContact.get("contact_id");
	contactDetails = zoho.invoice.getRecordById("contacts",orgId,contactId).get("contact");
	contactPersons = contactDetails.get("contact_persons").toList();
	for each  findCP in contactPersons
	{
		primaryContacts = findCP.get("is_primary_contact");
		if(primaryContacts == true)
		{
			contactPID = findCP.get("contact_person_id");
		}
	}
}
else
{
	crmContactInfo = Map();
	crmContactInfo.put("email",email);
	crmContactInfo.put("contact_name",firstName + " " + lastName);
	createContact = zoho.invoice.create("Contacts",orgId,crmContactInfo);
	createContactInfo = createContact.get("contact");
	contactId = createContactInfo.get("contact_id");
	contactPersonUpdate = Map();
	contactPersonUpdate.put("contact_persons",{{"first_name":firstName,"last_name":lastName,"email":email}});
	updateContactPerson = zoho.invoice.update("contacts",orgId,contactId,contactPersonUpdate);
	createContactPersonId = updateContactPerson.get("contact").get("contact_persons").toList();
	info createContactPersonId;
	for each  r in createContactPersonId
	{
		createContactPrimaryContact = r.get("is_primary_contact");
		if(createContactPrimaryContact == true)
		{
			contactPID = r.get("contact_person_id");
		}
	}
	info contactPID
}

	invoice = Map();
	invoice.put("customer_id",contactId);
	invoice.put("date",today);
	cpList = List();
	cpList.add(contactPID);
	invoice.put("contact_persons",cpList);
	//in the future, show how to feed line items in from CRM
	invoice.put("line_items",{{"item_id":"2062836000000068237","quantity":"1","discount":discount}});
	
	//telling it which payment gateways are enabled
	paymentOptions = List();
	paymentOptionsMap = Map();
	//this payment gateway can be edited/improved
	paymentOptionsMap.put("gateway_name","paypal");
	paymentOptionsMap.put("additional_field1","standard");
	paymentOptions.add(paymentOptionsMap);
	gatewayMap = Map();
	gatewayMap.put("payment_gateways",paymentOptions);
	invoice.put("payment_options",gatewayMap);
	//info "invoice==" + invoice;
	createInvoice = zoho.invoice.create("invoices",orgId,invoice);
	info createInvoice;
	code = createInvoice.get("code");
	if(code == 0)
	{
		emailList = List();
		emailList.add(email);
		invoiceInfo = createInvoice.get("invoice");
		invoiceId = invoiceInfo.get("invoice_id");
		info invoiceId;
		json = Map();
		json.put("to_mail_ids",emailList);
		params = Map();
		params.put("JSONString",json);
		
		emailInvoice = invokeurl
		[
			url :"https://books.zoho.com/api/v3/invoices/" + invoiceId + "/email?organization_id=" + orgId
			type :POST
			parameters:params
			connection:"zohobooks"
		];
		info emailInvoice.get("message");
