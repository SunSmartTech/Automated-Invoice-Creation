// Start by defining all the variables that you will need throughout the function, pulled from the CRM Contact record. Then call the Zoho Books Organizations API. You will have to do some sort of search based off name or something else if you have more than one organization.
contactRecord = zoho.crm.getRecordById("Contacts",CONTACT_ID);
info contactRecord;
email = contactRecord.get("Email");
firstName = contactRecord.get("First_Name");
lastName = contactRecord.get("Last_Name");
otherInfo = contactRecord.get("other_custom_field"); //other info as needed
getOrganizations = invokeurl
[
	url :"https://books.zoho.com/api/v3/organizations"
	type :GET
	connection:"zohobooks"
];
info getOrganizations;
orgId = getOrganizations.get("organizations").get(0).get("organization_id");
info orgId;
// Now that we have our defined variables, we search the Invoices module for Contacts with a matching email address. It should return a list of contacts (just one)
searchParam = {"email":email};
contactSearch = zoho.invoice.getRecords("Contacts",orgId,searchParam).get("contacts");
contactId = null;
contactPersonId = null;
// Check If Contact is Found. If not, we query the primary contact's info to put on the invoice
if(!contactSearch.isEmpty())
{
	// Get Contact Record
	contact = contactSearch.get(0);
	contactId = contact.get("contact_id");
	contactDetails = zoho.invoice.getRecordById("contacts",orgId,contactId).get("contact");
	contactPersons = contactDetails.get("contact_persons").toList();

	// Find Primary Contact
	for each contactPerson in contactPersons
	{
		if(contactPerson.get("is_primary_contact"))
		{
			contactPersonId = contactPerson.get("contact_person_id");
		}
	}
}
else //(list is empty, create the Contact and Contact person in Books and get the info for the Invoice)
{
	// Create Map for New Contact
	newContactMap = Map();
	newContactMap.put("email",email);
	newContactMap.put("contact_name",firstName + " " + lastName);
	newContactMap.put("contact_persons", {{"first_name":firstName,"last_name":lastName,"email":email}} );

	// Create New Contact
	createContact = zoho.invoice.create("Contacts",orgId,newContactMap);
	contact = createContact.get("contact");
	contactId = contact.get("contact_id");

	// Get Contact Person Info
	contactPerson = contact.get("contact_persons").get(0);
	contactPersonId = contactPerson.get("contact_person_id");
}

// Create New Invoice map
invoice = Map();
invoice.put("customer_id",contactId);
invoice.put("date",today);
contactPersonsList = List();
contactPersonsList.add(contactPersonId);
invoice.put("contact_persons",contactPersonsList);
invoice.put("line_items",{{"item_id":"2062836000120068237","quantity":"1","invoice_custom_field":otherInfo}});

// Set Payment Options
paymentOptions = List();
paymentOptionsMap = Map();
paymentOptionsMap.put("gateway_name","paypal");
paymentOptionsMap.put("additional_field1","standard");
paymentOptions.add(paymentOptionsMap);
gatewayMap = Map();
gatewayMap.put("payment_gateways",paymentOptions);
invoice.put("payment_options",gatewayMap);

// Create Invoice
createInvoice = zoho.invoice.create("invoices",orgId,invoice);
info createInvoice;

//If the invoice was created successfully, we send the email with the invoice and payment options via a Zoho Books API call
code = createInvoice.get("code");
if(code == 0)
{
	emailList = List();
	emailList.add(email);
	invoiceInfo = createInvoice.get("invoice");
	invoiceId = invoiceInfo.get("invoice_id");
	info invoiceId;
	json = Map();
	json.put("to_mail_ids",emailList);
	params = Map();
	params.put("JSONString",json);
	emailInvoice = invokeurl
	[
		url :"https://books.zoho.com/api/v3/invoices/" + invoiceId + "/email?organization_id=" + orgId
		type :POST
		parameters:params
		connection:"zohobooks"
	];
	info emailInvoice.get("message");
}
